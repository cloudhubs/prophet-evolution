[
  {
    "name": "dependencies",
    "definition": ""
  },

  {
    "name": "external dependencies",
    "definition": "Dependencies given by seperate specification such as functional or quality requirements",
    "parent": "dependencies"
  },
  {
    "name": "human dependencies",
    "definition": "Dependencies relating to human factors such as a need for specific expertise",
    "parent": "dependencies"
  },
  {
    "name": "artifact dependencies",
    "definition": "Dependencies that involve source code (semantics, control, data, etc.), configuration files, libraries, and used technology (i.e. API gateway). These are the dependencies that this project focuses on.",
    "parent": "dependencies"
  },

  {
    "name": "code clones",
    "definition": "fragments of similar or identical nature in code that may be indicative of restated concerns",
    "parent": "artifact dependencies"
  },
  {
    "name": "syntactic code clones",
    "definition": "Syntactic code clones involve fragments of code that are identical or nearly identical in terms of their syntax. These clones can emerge due to factors such as code reuse, common patterns, or shared functionalities between different microservices. When developers encounter similar tasks or functionalities across multiple microservices, they might replicate or reuse code fragments to save time and effort.",
    "parent": "code clones"
  },
  {
    "name": "semantic code clones",
    "definition": "Semantic code clones involve fragments of code that perform similar or identical functions, even though their syntax might be quite different. These clones represent duplicate or highly similar business logic or algorithms that achieve the same outcome.",
    "parent": "code clones"
  },

  {
    "name": "direct api calls",
    "definition": "Direct API call is a dependency perspective where one microservice invokes another microservice's API directly to access its functionality or data. This creates a direct dependency between the caller and the callee service.",
    "alias": [ "explicit remote call" ],
    "parent": "artifact dependencies"
  },
  {
    "name": "transitive api calls",
    "definition": "Transitive API call refers to a dependency perspective where a microservice indirectly invokes another microservice's API through an intermediary service. The intermediary service acts as a bridge between the caller and the callee, allowing for more flexible communication paths.",
    "parent": "artifact dependencies"
  },
  {
    "name": "entity data",
    "definition": "An entity data dependency refers to the situation where multiple microservices within a bounded context share similar persistent entities. These entities represent core data structures with common attributes and relationships that are used across different microservices.",
    "parent": "artifact dependencies"
  },
  {
    "name": "dto data",
    "definition": "Similar to the Entity Data Dependency, DTO (Data Transfer Object) Data Dependency involves the sharing of data objects, specifically for data transfer purposes in API calls and event data between microservices. It occurs when multiple microservices need to exchange specific data structures to fulfill their communication requirements.",
    "parent": "artifact dependencies"
  },
  {
    "name": "data field constraint",
    "definition": "Attributive dependency involving field constraints occurs when a microservice relies on specific constraints or validations applied to fields in another microserviceâ€™s data. This ensures consistent data quality and adherence to business rules.",
    "parent": "artifact dependencies"
  },
  {
    "name": "shared database",
    "definition": "Shared database refers to the practice of multiple microservices using the same database to store and retrieve data. While microservices architecture promotes autonomy, sharing a database can lead to tighter coupling between services.",
    "alias": [ "shared persistency", "shared repository" ],
    "parent": "artifact dependencies"
  },
  {
    "name": "anti-patterns",
    "definition": "named and identified generalized coding practices that have possible detriments to a system. For microservices, these may exist due to service dependencies (i.e. cyclic dependencies, knot), service strucutre (i.e. nano service, wrong cuts), etc."
  },
  {
    "name": "intermediate representation (IR)",
    "definition": ""
  },
  {
    "name": "component call graph (CCG)",
    "definition": "",
    "alias": [
      "call graph, service call graph",
      "flow graph",
      "prophet flow"
    ]
  },
  {
    "name": "service dependency graph",
    "definition": "",
    "alias": [ "dependency graph" ]
  },
  {
    "name": "delta",
    "definition": "",
    "alias": [ "change delta" ]
  },
  {
    "name": "service architecture reconstruction (SAR)",
    "definition": ""
  },
  {
    "name": "rad",
    "definition": ""
  },
  {
    "name": "co-change",
    "definition": ""
  },
  {
    "name": "perspectives",
    "definition": "Different ways to analyze a microservice system in order to extract information"
  },

  {
    "name": "control-flow perspective",
    "definition": "",
    "parent": "perspectives"
  },
  {
    "name": "data-flow perspective",
    "definition": "",
    "parent": "perspectives"
  },
  {
    "name": "data persistence perspective",
    "definition": "",
    "parent": "perspectives"
  },
  {
    "name": "application level",
    "definition": "",
    "parent": "perspectives"
  },
  {
    "name": "ecosystem level",
    "definition": "",
    "parent": "perspectives"
  },
  {
    "name": "change impact",
    "definition": ""
  }

]
